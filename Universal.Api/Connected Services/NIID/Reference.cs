//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NIID
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://hts.org/", ConfigurationName="NIID.ServiceSoap")]
    public interface ServiceSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://hts.org/Vehicle_PolicyVerification", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> Vehicle_PolicyVerificationAsync(string SearchString, string SearchType, string Username, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://hts.org/User_Validate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> User_ValidateAsync(string Username, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://hts.org/Marine_CheckTradePortalInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> Marine_CheckTradePortalInfoAsync(string Username, string Password, string CertificateNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://hts.org/Vehicle_Policy_Push", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> Vehicle_Policy_PushAsync(
                    string Username, 
                    string Password, 
                    string NiaNaicomID, 
                    string PolicyNo, 
                    string InsuredName, 
                    string ContactAddress, 
                    string GSMNo, 
                    string Email, 
                    string EffectiveCoverDate, 
                    string ExpirationDate, 
                    string TypeOfCover, 
                    string VehicleCategory, 
                    string EngineNo, 
                    string ChasisNo, 
                    string VehicleColor, 
                    string YearofMake, 
                    string VehicleMake, 
                    string RegistrationNo, 
                    string OldRegistrationNo, 
                    string VehicleType, 
                    string EngineCapacity, 
                    string VehicleModel, 
                    double SumAssured, 
                    double Premium, 
                    string CoverNoteNo, 
                    string CertificateNo, 
                    string GeographicalZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://hts.org/Marine_Policy_Endorsement", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> Marine_Policy_EndorsementAsync(
                    string Username, 
                    string Password, 
                    string CurrentPolicyNo, 
                    string NewPolicyNo, 
                    string CertificateNo, 
                    string CurrentProformaInvoice, 
                    string NewProformaInvoice, 
                    string ClientName, 
                    string ClientAddress, 
                    string ClientMobile, 
                    string ClientEmail, 
                    string InceptionDate, 
                    string MarinePolicyTypeId, 
                    string CoverTypeId, 
                    string CargoDescription, 
                    string PackingTypeId, 
                    string BankName, 
                    string Premium, 
                    string SumInsured, 
                    string BasicRate, 
                    string Conditions, 
                    string SailingFrom, 
                    string SailingTo, 
                    string VesselName, 
                    string InvoicedValue, 
                    string CargoCurrencyTypeId, 
                    string TIN, 
                    string NatureOfCargo, 
                    string CancelPolicy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://hts.org/Marine_Policy_Push", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> Marine_Policy_PushAsync(
                    string Username, 
                    string Password, 
                    string NiaNaicomID, 
                    string CustomerCategoryId, 
                    string PolicyNo, 
                    string CertificateNo, 
                    string ProformaInvoice, 
                    string ClientName, 
                    string ClientAddress, 
                    string ClientMobile, 
                    string ClientEmail, 
                    string InceptionDate, 
                    string MarinePolicyTypeId, 
                    string CoverTypeId, 
                    string CargoDescription, 
                    string PackingTypeId, 
                    string BankName, 
                    string Premium, 
                    string SumInsured, 
                    string WarAndStrikeRate, 
                    string BasicRate, 
                    string TotalRate, 
                    string Conditions, 
                    string SailingFrom, 
                    string SailingTo, 
                    string VesselName, 
                    string InvoicedValue, 
                    string CargoCurrencyTypeId, 
                    string Coinsurance, 
                    string TIN, 
                    string NatureOfCargo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://hts.org/Vehicle_Policy_Endorsement", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<NIID.Vehicle_Policy_EndorsementResponse> Vehicle_Policy_EndorsementAsync(NIID.Vehicle_Policy_EndorsementRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://hts.org/Vehicle_Policy_Surppress", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> Vehicle_Policy_SurppressAsync(string Username, string Password, string PolicyNo, string ChassisNo, string RegNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://hts.org/VehicleClaimsPush", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> VehicleClaimsPushAsync(string Username, string Password, string RegNo, string DateOccurred, int NatureOfClaim, string PlaceOfOccurrence, string DateReported, int TotalLoss);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://hts.org/OccupiersLiability_Push", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> OccupiersLiability_PushAsync(string Username, string Password, string PolicyNo, string CertificateNo, string OwnerName, string OccupierName, string BuildingPremisesAddress, string DescriptionOfPremises, string PurposeOfOccupation, string CoverEffectiveDate, string CoverExpiryDate, string ClassOfPersonsInsured, string ContingencyInsuredAgainst, string LimitOfBenefits, string AnnualPremium);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Vehicle_Policy_Endorsement", WrapperNamespace="http://hts.org/", IsWrapped=true)]
    public partial class Vehicle_Policy_EndorsementRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://hts.org/", Order=0)]
        public string Username;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://hts.org/", Order=1)]
        public string Password;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://hts.org/", Order=2)]
        public string NiaNaicomId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://hts.org/", Order=3)]
        public string PolicyNo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://hts.org/", Order=4)]
        public string CurrentRegNo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://hts.org/", Order=5)]
        public string InsuredName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://hts.org/", Order=6)]
        public string InsuredTelephone;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://hts.org/", Order=7)]
        public string InsuredEmail;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://hts.org/", Order=8)]
        public string InsuredAddress;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://hts.org/", Order=9)]
        public string NewRegNo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://hts.org/", Order=10)]
        public string OldRegNo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://hts.org/", Order=11)]
        public string ChassisNo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://hts.org/", Order=12)]
        public string EngineNo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://hts.org/", Order=13)]
        public string EngineCapacity;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://hts.org/", Order=14)]
        public string VehicleColor;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://hts.org/", Order=15)]
        public string VehicleMake;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://hts.org/", Order=16)]
        public string VehicleModel;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://hts.org/", Order=17)]
        public string VehicleType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://hts.org/", Order=18)]
        public string CertificateNo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://hts.org/", Order=19)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<double> SumInsured;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://hts.org/", Order=20)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<double> Premium;
        
        public Vehicle_Policy_EndorsementRequest()
        {
        }
        
        public Vehicle_Policy_EndorsementRequest(
                    string Username, 
                    string Password, 
                    string NiaNaicomId, 
                    string PolicyNo, 
                    string CurrentRegNo, 
                    string InsuredName, 
                    string InsuredTelephone, 
                    string InsuredEmail, 
                    string InsuredAddress, 
                    string NewRegNo, 
                    string OldRegNo, 
                    string ChassisNo, 
                    string EngineNo, 
                    string EngineCapacity, 
                    string VehicleColor, 
                    string VehicleMake, 
                    string VehicleModel, 
                    string VehicleType, 
                    string CertificateNo, 
                    System.Nullable<double> SumInsured, 
                    System.Nullable<double> Premium)
        {
            this.Username = Username;
            this.Password = Password;
            this.NiaNaicomId = NiaNaicomId;
            this.PolicyNo = PolicyNo;
            this.CurrentRegNo = CurrentRegNo;
            this.InsuredName = InsuredName;
            this.InsuredTelephone = InsuredTelephone;
            this.InsuredEmail = InsuredEmail;
            this.InsuredAddress = InsuredAddress;
            this.NewRegNo = NewRegNo;
            this.OldRegNo = OldRegNo;
            this.ChassisNo = ChassisNo;
            this.EngineNo = EngineNo;
            this.EngineCapacity = EngineCapacity;
            this.VehicleColor = VehicleColor;
            this.VehicleMake = VehicleMake;
            this.VehicleModel = VehicleModel;
            this.VehicleType = VehicleType;
            this.CertificateNo = CertificateNo;
            this.SumInsured = SumInsured;
            this.Premium = Premium;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Vehicle_Policy_EndorsementResponse", WrapperNamespace="http://hts.org/", IsWrapped=true)]
    public partial class Vehicle_Policy_EndorsementResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://hts.org/", Order=0)]
        public string Vehicle_Policy_EndorsementResult;
        
        public Vehicle_Policy_EndorsementResponse()
        {
        }
        
        public Vehicle_Policy_EndorsementResponse(string Vehicle_Policy_EndorsementResult)
        {
            this.Vehicle_Policy_EndorsementResult = Vehicle_Policy_EndorsementResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public interface ServiceSoapChannel : NIID.ServiceSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public partial class ServiceSoapClient : System.ServiceModel.ClientBase<NIID.ServiceSoap>, NIID.ServiceSoap
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ServiceSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(ServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), ServiceSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<string> Vehicle_PolicyVerificationAsync(string SearchString, string SearchType, string Username, string Password)
        {
            return base.Channel.Vehicle_PolicyVerificationAsync(SearchString, SearchType, Username, Password);
        }
        
        public System.Threading.Tasks.Task<bool> User_ValidateAsync(string Username, string Password)
        {
            return base.Channel.User_ValidateAsync(Username, Password);
        }
        
        public System.Threading.Tasks.Task<string> Marine_CheckTradePortalInfoAsync(string Username, string Password, string CertificateNo)
        {
            return base.Channel.Marine_CheckTradePortalInfoAsync(Username, Password, CertificateNo);
        }
        
        public System.Threading.Tasks.Task<string> Vehicle_Policy_PushAsync(
                    string Username, 
                    string Password, 
                    string NiaNaicomID, 
                    string PolicyNo, 
                    string InsuredName, 
                    string ContactAddress, 
                    string GSMNo, 
                    string Email, 
                    string EffectiveCoverDate, 
                    string ExpirationDate, 
                    string TypeOfCover, 
                    string VehicleCategory, 
                    string EngineNo, 
                    string ChasisNo, 
                    string VehicleColor, 
                    string YearofMake, 
                    string VehicleMake, 
                    string RegistrationNo, 
                    string OldRegistrationNo, 
                    string VehicleType, 
                    string EngineCapacity, 
                    string VehicleModel, 
                    double SumAssured, 
                    double Premium, 
                    string CoverNoteNo, 
                    string CertificateNo, 
                    string GeographicalZone)
        {
            return base.Channel.Vehicle_Policy_PushAsync(Username, Password, NiaNaicomID, PolicyNo, InsuredName, ContactAddress, GSMNo, Email, EffectiveCoverDate, ExpirationDate, TypeOfCover, VehicleCategory, EngineNo, ChasisNo, VehicleColor, YearofMake, VehicleMake, RegistrationNo, OldRegistrationNo, VehicleType, EngineCapacity, VehicleModel, SumAssured, Premium, CoverNoteNo, CertificateNo, GeographicalZone);
        }
        
        public System.Threading.Tasks.Task<string> Marine_Policy_EndorsementAsync(
                    string Username, 
                    string Password, 
                    string CurrentPolicyNo, 
                    string NewPolicyNo, 
                    string CertificateNo, 
                    string CurrentProformaInvoice, 
                    string NewProformaInvoice, 
                    string ClientName, 
                    string ClientAddress, 
                    string ClientMobile, 
                    string ClientEmail, 
                    string InceptionDate, 
                    string MarinePolicyTypeId, 
                    string CoverTypeId, 
                    string CargoDescription, 
                    string PackingTypeId, 
                    string BankName, 
                    string Premium, 
                    string SumInsured, 
                    string BasicRate, 
                    string Conditions, 
                    string SailingFrom, 
                    string SailingTo, 
                    string VesselName, 
                    string InvoicedValue, 
                    string CargoCurrencyTypeId, 
                    string TIN, 
                    string NatureOfCargo, 
                    string CancelPolicy)
        {
            return base.Channel.Marine_Policy_EndorsementAsync(Username, Password, CurrentPolicyNo, NewPolicyNo, CertificateNo, CurrentProformaInvoice, NewProformaInvoice, ClientName, ClientAddress, ClientMobile, ClientEmail, InceptionDate, MarinePolicyTypeId, CoverTypeId, CargoDescription, PackingTypeId, BankName, Premium, SumInsured, BasicRate, Conditions, SailingFrom, SailingTo, VesselName, InvoicedValue, CargoCurrencyTypeId, TIN, NatureOfCargo, CancelPolicy);
        }
        
        public System.Threading.Tasks.Task<string> Marine_Policy_PushAsync(
                    string Username, 
                    string Password, 
                    string NiaNaicomID, 
                    string CustomerCategoryId, 
                    string PolicyNo, 
                    string CertificateNo, 
                    string ProformaInvoice, 
                    string ClientName, 
                    string ClientAddress, 
                    string ClientMobile, 
                    string ClientEmail, 
                    string InceptionDate, 
                    string MarinePolicyTypeId, 
                    string CoverTypeId, 
                    string CargoDescription, 
                    string PackingTypeId, 
                    string BankName, 
                    string Premium, 
                    string SumInsured, 
                    string WarAndStrikeRate, 
                    string BasicRate, 
                    string TotalRate, 
                    string Conditions, 
                    string SailingFrom, 
                    string SailingTo, 
                    string VesselName, 
                    string InvoicedValue, 
                    string CargoCurrencyTypeId, 
                    string Coinsurance, 
                    string TIN, 
                    string NatureOfCargo)
        {
            return base.Channel.Marine_Policy_PushAsync(Username, Password, NiaNaicomID, CustomerCategoryId, PolicyNo, CertificateNo, ProformaInvoice, ClientName, ClientAddress, ClientMobile, ClientEmail, InceptionDate, MarinePolicyTypeId, CoverTypeId, CargoDescription, PackingTypeId, BankName, Premium, SumInsured, WarAndStrikeRate, BasicRate, TotalRate, Conditions, SailingFrom, SailingTo, VesselName, InvoicedValue, CargoCurrencyTypeId, Coinsurance, TIN, NatureOfCargo);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<NIID.Vehicle_Policy_EndorsementResponse> NIID.ServiceSoap.Vehicle_Policy_EndorsementAsync(NIID.Vehicle_Policy_EndorsementRequest request)
        {
            return base.Channel.Vehicle_Policy_EndorsementAsync(request);
        }
        
        public System.Threading.Tasks.Task<NIID.Vehicle_Policy_EndorsementResponse> Vehicle_Policy_EndorsementAsync(
                    string Username, 
                    string Password, 
                    string NiaNaicomId, 
                    string PolicyNo, 
                    string CurrentRegNo, 
                    string InsuredName, 
                    string InsuredTelephone, 
                    string InsuredEmail, 
                    string InsuredAddress, 
                    string NewRegNo, 
                    string OldRegNo, 
                    string ChassisNo, 
                    string EngineNo, 
                    string EngineCapacity, 
                    string VehicleColor, 
                    string VehicleMake, 
                    string VehicleModel, 
                    string VehicleType, 
                    string CertificateNo, 
                    System.Nullable<double> SumInsured, 
                    System.Nullable<double> Premium)
        {
            NIID.Vehicle_Policy_EndorsementRequest inValue = new NIID.Vehicle_Policy_EndorsementRequest();
            inValue.Username = Username;
            inValue.Password = Password;
            inValue.NiaNaicomId = NiaNaicomId;
            inValue.PolicyNo = PolicyNo;
            inValue.CurrentRegNo = CurrentRegNo;
            inValue.InsuredName = InsuredName;
            inValue.InsuredTelephone = InsuredTelephone;
            inValue.InsuredEmail = InsuredEmail;
            inValue.InsuredAddress = InsuredAddress;
            inValue.NewRegNo = NewRegNo;
            inValue.OldRegNo = OldRegNo;
            inValue.ChassisNo = ChassisNo;
            inValue.EngineNo = EngineNo;
            inValue.EngineCapacity = EngineCapacity;
            inValue.VehicleColor = VehicleColor;
            inValue.VehicleMake = VehicleMake;
            inValue.VehicleModel = VehicleModel;
            inValue.VehicleType = VehicleType;
            inValue.CertificateNo = CertificateNo;
            inValue.SumInsured = SumInsured;
            inValue.Premium = Premium;
            return ((NIID.ServiceSoap)(this)).Vehicle_Policy_EndorsementAsync(inValue);
        }
        
        public System.Threading.Tasks.Task<string> Vehicle_Policy_SurppressAsync(string Username, string Password, string PolicyNo, string ChassisNo, string RegNo)
        {
            return base.Channel.Vehicle_Policy_SurppressAsync(Username, Password, PolicyNo, ChassisNo, RegNo);
        }
        
        public System.Threading.Tasks.Task<string> VehicleClaimsPushAsync(string Username, string Password, string RegNo, string DateOccurred, int NatureOfClaim, string PlaceOfOccurrence, string DateReported, int TotalLoss)
        {
            return base.Channel.VehicleClaimsPushAsync(Username, Password, RegNo, DateOccurred, NatureOfClaim, PlaceOfOccurrence, DateReported, TotalLoss);
        }
        
        public System.Threading.Tasks.Task<string> OccupiersLiability_PushAsync(string Username, string Password, string PolicyNo, string CertificateNo, string OwnerName, string OccupierName, string BuildingPremisesAddress, string DescriptionOfPremises, string PurposeOfOccupation, string CoverEffectiveDate, string CoverExpiryDate, string ClassOfPersonsInsured, string ContingencyInsuredAgainst, string LimitOfBenefits, string AnnualPremium)
        {
            return base.Channel.OccupiersLiability_PushAsync(Username, Password, PolicyNo, CertificateNo, OwnerName, OccupierName, BuildingPremisesAddress, DescriptionOfPremises, PurposeOfOccupation, CoverEffectiveDate, CoverExpiryDate, ClassOfPersonsInsured, ContingencyInsuredAgainst, LimitOfBenefits, AnnualPremium);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.ServiceSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.ServiceSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpsTransportBindingElement httpsBindingElement = new System.ServiceModel.Channels.HttpsTransportBindingElement();
                httpsBindingElement.AllowCookies = true;
                httpsBindingElement.MaxBufferSize = int.MaxValue;
                httpsBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpsBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.ServiceSoap))
            {
                return new System.ServiceModel.EndpointAddress("https://www.niid.org/NIA_API/Service.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.ServiceSoap12))
            {
                return new System.ServiceModel.EndpointAddress("https://www.niid.org/NIA_API/Service.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            ServiceSoap,
            
            ServiceSoap12,
        }
    }
}
